// -----------------------------------------------------------------------------
// Theme variables.
// -----------------------------------------------------------------------------

/// Regular ( Lato ) font family
$font-family-base: 'Lato', sans-serif !default;

// Code (Roboto) font family
$font-family-code: 'Roboto Condensed', sans-serif !default;

//body contect text size
$font-size-base:   16px !default;
$font-size-small:  $font-size-base - 2 !default;
$font-size-large:  $font-size-base + 2 !default;

// Start with assigning color names to specific hex values.
/*color('white'):      #fff !default;
$lightwhite: #f6f6f6 !default;
$black:      #000 !default;
$darkgray:   #404043 !default;
$lightgray:  #ccc !default;*/




    $color-percent-change: 4%;

    $colors: (
        'brand-primary': #252869,
        'brand-secondary': #8D3006,
        'brand-tertiary': #BC3A00,
        'white':      #fff,
        'gray-light': #f1f1f1,
        'black':      #000,
        'gray':   #555555,
    );

    $colormap: ();

    @each $name, $color in $colors {
      $generated: (

        'lightest': lighten($color, ($color-percent-change * 3)),
        'lighter': lighten($color, ($color-percent-change * 2)),
        'light': lighten($color, ($color-percent-change * 1)),
        'base': $color,
        'dark': darken($color, ($color-percent-change * 1)),
        'darker': darken($color, ($color-percent-change * 2)),
        'darkest': darken($color, ($color-percent-change * 3)),

      );
      $colormap: map-merge($colormap, ($name: $generated));
    }

    @function color($color, $type: 'base') {
        @if map-has-key($colormap, $color) && map-has-key(map-get($colormap, $color), $type) {
            $result:  map-get(map-get($colormap, $color), $type);
        }
        @return $result;
    }



/*
@each $colorLightShade-key, $colorchanges in $colorLightShade {
    @each $colorVar-key, $colorVal-key, $colorchanges-key in $colorVar, $colorVal, $colorchanges {
        //#{$colorVar-key}-#{$colorLightShade-key} : lighten(adjust-hue($colorVal-key, $colorchanges-key), 10%);
        #{$colorVar-key} : #{$colorLightShade-key};
    }
}*/

// @each $colorLightShade-key in $colorLightShade {
//     @each $colorVal-key in $colorVal {
//         @each $colorchanges-key in $colorchanges {
//             #{$colorVar-key}-#{$colorLightShade-key}-#{$colorVal-key}-#{$colorchanges-key} : 'tets';
//         }
//     }
// }



// Heading font family
$font-size-h1:  2.0rem !default;
$font-size-h2:  1.8rem !default;
$font-size-h3:  1.5rem !default;
$font-size-h4:  1.375rem !default;
$font-size-h5:  1.25rem !default;
$font-size-h6:  1.125rem !default;

// Heading Typo
$headings-font-family:   inherit !default;
$headings-font-weight:   700 !default;
$headings-line-height:   1.4 !default;

$border-radius: 0.5rem;

// Forms
$label-color:               color('black');
$label-font-weight:         400;
$label-font-family:         $font-family-base;
$label-font-size:           $font-size-small;

$input-bg:                  color('white');
$input-height:              44px;
$input-color:               color('brand-primary');
$input-color-placeholder:   color('brand-secondary');
$input-font-size:           $font-size-base;
$input-font-family:         $font-family-base;
$input-font-weight:         400;
$input-radius:              10px;
$input-border-color:        color('brand-secondary');
$input-border-color-focus:  color('brand-secondary');
$textarea-height-base:      170px;

//Container's maximum width
$wrapper-width:  1170px !default;


//text-transform property
$texttransform: ("uppercase", "capitalize", "lowercase", "none");

// spacing : padding and margin
$spaceamounts: (0, 5, 10, 15, 20, 25, 30, 35, 50, 70);

$textalign: ("left", "right", "center", "justify");

// media query breakpoints.
$breakpoints: (
    '1200': 1200px,
    '1024': 1024px,
    '992': 992px,
    '767': 767px,
    '640': 640px,
    '568': 568px,
    '480': 480px,
    '359': 359px
);

$innbaneramounts: (25, 50, 60, 70, 75, 80, 90, 100, 110, 120, 125, 130, 140, 150, 175, 200);
/*
// media breakpoint
$phone_small:      480px; //Extra small devices (small phones, less than 480px)
$phone_portrait:   640px; //Extra small devices (portrait phones, less than 640px)
$phone_landscape:  767px; //Small devices (landscape phones, less than 767px)
$tablet_portrait:  $phone_landscape + 1; //(tablets, 768px and up)
$tablet:           992px; //Medium devices (tablets, 992px and up)
$desktop:          1200px; //Extra large devices (large desktops, 1200px and up)
*/
