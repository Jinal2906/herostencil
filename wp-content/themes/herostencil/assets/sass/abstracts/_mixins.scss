// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

// Responsive media breakpoint

@mixin breakpoint($size) {
	@if $size == xs { // Extra small devices (portrait phones, less than 640px)
		@media ( max-width: $phone_portrait ) { @content; }
	} @else if $size == sm { // Small devices (landscape phones, less than 767px)
		@media ( max-width: $phone_landscape ) { @content; }
	} @else if $size == smlandscape { // iPhone X landscape
		@media ( min-height: 375px ) and ( max-width: 812px ) and ( orientation: landscape ) { @content; }
	} @else if $size == md { // Medium devices (tablets, 768px and up)
		@media ( min-width: $tablet_portrait ) and ( max-width: $tablet - 1 ) { @content; }
	} @else if $size == lg { // Large devices (desktops, 1024px and up)
		@media ( min-width: $tablet ) and ( max-width: $desktop) { @content; }
	} @else if $size == xl { // Extra large devices (large desktops, 1200px and up)
		@media ( min-width: $desktop+1 ) { @content; }
	}
}

// @include respond-above(sm) {}
/* @mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}
*/
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ( $breakpoint-value )) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
/*
@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }

  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}
*/
// Responsive media grid breakpoint

@mixin grid-breakpoint($size) {
	@if $size == xs { // Small devices (landscape phones, less than 640px)
		@media ( min-width: $phone_portrait+1 ) { @content; }
	} @else if $size == md { // Medium devices (tablets, less than 767px)
		@media ( min-width: $tablet_portrait ){ @content; }
	} @else if $size == lg { // Large devices (desktops, 1024px and up)
		@media ( min-width: $tablet ) { @content; }
	} @else if $size == xl { // Extra large devices (large desktops, 1200px and up)
		@media ( min-width: $desktop ) { @content; }
	}
}

//Represent various position
/*
@mixin position($position:'', $topdirection:'', $rightdirection:'', $bottomdirection:'', $leftdirection:'') {
    position: 	unquote($position);
    top: 		unquote($topdirection);
    right: 		unquote($rightdirection);
    bottom: 	unquote($bottomdirection);
    left: 		unquote($leftdirection);
}

*/


//Represent transition
// @mixin transition($value) {
//     transition: 		$value ease all;
//     -webkit-transition: $value ease all;
// }

//Represent transform
@mixin transform($value) {
    transform: 			skewX($value);
    -webkit-transform: 	skewX($value);
}

//Represent dislay flex proeprty
@mixin display($display, $justify-content:'', $flex-wrap:'', $align-items:''){
	display: 			$display;
	justify-content: 	unquote($justify-content);
	flex-wrap: 			unquote($flex-wrap);
	align-items: 		unquote($align-items);
}
